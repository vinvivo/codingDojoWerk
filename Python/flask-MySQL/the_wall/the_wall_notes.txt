Users
Id autoincretment
Message
created_at
updated_at
user_id NN


Comments
Id PK NN AI
Comment
created_at
updated_at
message_id
user_id


Messages
Message
created_at
updated_at


Forward Engineer
lightning button
Refresh

Activate flask

Make directories and files
Copy mysqlconnection.py file into directory


From flask import Flask, redirect, render_template, session, flash, request
Import md5
From mysqlconnection import MySQLConnector

app = Flask(__name__)
app.secret_key = “”
salt = “popcorn”

Mysql = MySQLConnector(app, ‘the_wall_flask’)

@app.route(‘/logreg.html’)
def index():
	return render_template(‘loginreg.html’)

@app.route(‘/users’, methods = [‘POST’])
def register():
	hashed_pw = md5.new(salt+request.form[‘password’]+salt).hexdigest()
	query_reg = “INSERT INTO users (first_name, last_name, email, password, created_at, updated_at) VALUES (:fn, :ln, :em, :pw, NOW(), NOW())”
	pass 
	data = {
	“fn”: request.form[‘first_name’],
	…
	}
	mysql.query_db(query_reg, data)
	return redirect(‘/‘)

@app.route(‘/login’, methods=[‘POST’])
def login():
	query_login = “SELECT * FROM users WHERE email = :em”
	data = {“em”: request.form[‘email’]}
	found_user = mysql.query_db(query_login, data)
	hashed_input = md5.new(salt+request.form[‘password’]+salt).hexdigest()	# check password after query
	if len(found_user) > 0 AND hashed_input = found_user[0][‘password’]:
		session[“user_id”] = found_user[0][‘id’]	# we have user_id created in session
		session[“user_name”] = found_user[0][‘first_name’] + “ “ + found_user[0][‘last_name’]
		return redirect(‘/wall’)
	else:
		return redirect(‘/‘)

@app.route(‘/messages’, methods=[‘POST’])
def create_message():
	query_message = “INSERT INTO messaages (user_id, message, created_at, updated_at) VALUES(:u_is, :msg, NOW(), NOW())”
	data = {
	“u_id”: session[“user_id”]
	“msg”: request.form[‘message’]
	}
	mysql.query_db(query_message, data)
	return redirect(‘/wall’)

@app.route(‘/comments/<message_id>’, methods=[‘POST’])
def create_comment(message_id):
	query_create_message: “INSERT INTO comments(user_id, message_id, comment, created_at, updated_at) VALUES(:u_id, :m_id, :cmt, NOW(), NOW())”
	data = {
	“u_id”: session[“user_id”],
	“m_id”: message_id,
	“cmt”: request.form[‘comment’]
	}
	mysql.query_db(query_create_message, data)
	return redirect(‘/wall’)

@app.route(‘/wall’)
def wall():
	query_wall = “SELECT users.first_name, users.last_name, DATE_FORMAT(messages.created_at, %M %D %Y) as created_at, messages.message, messages.id FROM messages JOIN users ON messages.user_id = users.id”
	query_result = mysql.query_db(query_wall)
	all_messages = []
	print all_messages
	return render_template(‘wall.html’, messages = all_messages)	# we want /wall route to be the only place we render the wall template, so 

app.run(debug = True)







<form action = “/messages” type method=“POST”>
	<input type=“text” name=“messages>
</form>
<h3>ALL MESSAGES</h3>
{% for message in messages %}
	<fieldset>
		<h4>{{ message[‘first_name’] }} {{ message[‘last_name’] }} - {{ message[‘created_at’] }}</h4>
		<p>{{ message[’message’] }}<p>
		<h5>Create a new comment”</h5>
		<form action=“/comments/{{ messages[‘id’] }}” method=“POST”>
	</fieldset>
	
{% endfor %}



QUERY

SELECT op.first_name as op_first_name, op.last_name as op_last_name, repliers.first_name, as replier_first_name, repliers.last_name as replier
	
